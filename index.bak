<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Voting System</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f7fa;
            color: #333;
        }
        
        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
        }
        
        .instructions {
            background-color: #e8f4f8;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 30px;
            border-left: 4px solid #3498db;
        }
        
        .voting-area {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .voting-option {
            width: 200px;
            background-color: #fff;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
            cursor: pointer;
        }
        
        .voting-option:hover {
            transform: translateY(-5px);
        }
        
        .voting-option img {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }
        
        .option-details {
            padding: 15px;
            text-align: center;
        }
        
        .option-name {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .vote-count {
            color: #7f8c8d;
        }
        
        .results-section {
            margin-top: 30px;
        }
        
        .results-section h2 {
            text-align: center;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        
        .results-chart {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .result-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .result-label {
            width: 110px;
            font-weight: bold;
        }
        
        .result-bar-container {
            flex-grow: 1;
            height: 25px;
            background-color: #ecf0f1;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .result-bar {
            height: 100%;
            background-color: #3498db;
            transition: width 0.5s ease;
        }
        
        .result-percentage {
            margin-left: 10px;
            font-weight: bold;
            width: 70px;
            text-align: right;
        }
        
        .vote-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 30px;
        }
        
        button {
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        #reset-button {
            background-color: #e74c3c;
            color: white;
        }
        
        #reset-button:hover {
            background-color: #c0392b;
        }
        
        #end-voting-button {
            background-color: #2c3e50;
            color: white;
        }
        
        #end-voting-button:hover {
            background-color: #1a2530;
        }
        
        .voting-ended {
            text-align: center;
            font-size: 18px;
            color: #e74c3c;
            font-weight: bold;
            margin: 20px 0;
        }
        
        .hidden {
            display: none;
        }
        
        @media (max-width: 768px) {
            .voting-area {
                gap: 15px;
            }
            
            .voting-option {
                width: 150px;
            }
        }
    </style>
</head>
<body>
    <h1>Image Voting System</h1>
    
    <div class="instructions">
        <p>Click on an image to cast your vote. Each visitor can vote once for each option. Voting results will be tallied and displayed in real-time.</p>
    </div>
    
    <div class="voting-area" id="voting-area">
        <!-- Voting options will be added here via JavaScript -->
    </div>
    
    <div class="voting-ended hidden" id="voting-ended-message">
        Voting has ended! See the final results below.
    </div>
    
    <div class="results-section">
        <h2>Current Results</h2>
        <div class="results-chart" id="results-chart">
            <!-- Results will be added here via JavaScript -->
        </div>
    </div>
    
    <div class="vote-buttons">
        <button id="reset-button">Reset All Votes</button>
        <button id="end-voting-button">End Voting</button>
    </div>
    
    <script>
        // Sample voting options - replace these with your own images and options
        const votingOptions = [
            { id: 1, name: "Mountain", image: "/api/placeholder/200/150", votes: 0 },
            { id: 2, name: "Beach", image: "/api/placeholder/200/150", votes: 0 },
            { id: 3, name: "Forest", image: "/api/placeholder/200/150", votes: 0 },
            { id: 4, name: "Desert", image: "/api/placeholder/200/150", votes: 0 }
        ];
        
        // Load saved votes from localStorage or use default values
        const loadVotes = () => {
            const savedVotes = localStorage.getItem('imageVotes');
            if (savedVotes) {
                const parsedVotes = JSON.parse(savedVotes);
                votingOptions.forEach(option => {
                    const savedOption = parsedVotes.find(item => item.id === option.id);
                    if (savedOption) {
                        option.votes = savedOption.votes;
                    }
                });
            }
        };
        
        // Save votes to localStorage
        const saveVotes = () => {
            localStorage.setItem('imageVotes', JSON.stringify(votingOptions));
        };
        
        // Check if voting has ended
        const isVotingEnded = () => {
            return localStorage.getItem('votingEnded') === 'true';
        };
        
        // Render voting options
        const renderVotingOptions = () => {
            const votingArea = document.getElementById('voting-area');
            votingArea.innerHTML = '';
            
            votingOptions.forEach(option => {
                const optionElement = document.createElement('div');
                optionElement.className = 'voting-option';
                optionElement.innerHTML = `
                    <img src="${option.image}" alt="${option.name}">
                    <div class="option-details">
                        <div class="option-name">${option.name}</div>
                        <div class="vote-count">${option.votes} votes</div>
                    </div>
                `;
                
                if (!isVotingEnded()) {
                    optionElement.addEventListener('click', () => {
                        option.votes++;
                        saveVotes();
                        renderVotingOptions();
                        renderResults();
                    });
                }
                
                votingArea.appendChild(optionElement);
            });
        };
        
        // Render voting results
        const renderResults = () => {
            const resultsChart = document.getElementById('results-chart');
            resultsChart.innerHTML = '';
            
            const totalVotes = votingOptions.reduce((sum, option) => sum + option.votes, 0);
            
            votingOptions.forEach(option => {
                const percentage = totalVotes > 0 ? (option.votes / totalVotes * 100).toFixed(1) : 0;
                
                const resultItem = document.createElement('div');
                resultItem.className = 'result-item';
                resultItem.innerHTML = `
                    <div class="result-label">${option.name}</div>
                    <div class="result-bar-container">
                        <div class="result-bar" style="width: ${percentage}%"></div>
                    </div>
                    <div class="result-percentage">${percentage}%</div>
                `;
                
                resultsChart.appendChild(resultItem);
            });
        };
        
        // Reset all votes
        const resetVotes = () => {
            votingOptions.forEach(option => {
                option.votes = 0;
            });
            saveVotes();
            renderVotingOptions();
            renderResults();
        };
        
        // End voting
        const endVoting = () => {
            localStorage.setItem('votingEnded', 'true');
            document.getElementById('voting-ended-message').classList.remove('hidden');
            document.getElementById('end-voting-button').disabled = true;
            renderVotingOptions(); // Re-render to remove click handlers
        };
        
        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            loadVotes();
            renderVotingOptions();
            renderResults();
            
            // Add event listeners to buttons
            document.getElementById('reset-button').addEventListener('click', resetVotes);
            document.getElementById('end-voting-button').addEventListener('click', endVoting);
            
            // Check if voting has already ended
            if (isVotingEnded()) {
                document.getElementById('voting-ended-message').classList.remove('hidden');
                document.getElementById('end-voting-button').disabled = true;
            }
        });
    </script>
</body>
</html>